
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jplkrysolselfculqvqr.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpwbGtyeXNvbHNlbGZjdWxxdnFyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY4MDQ3MjgsImV4cCI6MjA2MjM4MDcyOH0.ONBqZ01vHMrxEzxPklhPm5BlhI6O5Kjv1MFOJx_JN4A";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    auth: {
      storage: typeof window !== 'undefined' ? localStorage : undefined,
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: 'implicit'
    }
  }
);

// Helper functions for debugging session issues
export const checkAuthSession = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    console.log('Current session status:', {
      hasSession: !!data.session, 
      error: error?.message || null,
      sessionExpiresAt: data.session?.expires_at,
      currentTime: Math.floor(Date.now() / 1000)
    });
    return data.session;
  } catch (err) {
    console.error('Error checking auth session:', err);
    return null;
  }
}

// Helper for workout days (since workout_days is not in the generated types yet)
export const workoutDaysClient = {
  async getWorkoutDays(workoutId: string) {
    const { data, error } = await supabase
      .from('workout_days')
      .select('day_of_week')
      .eq('workout_id', workoutId);
    
    if (error) {
      throw new Error(`Error fetching workout days: ${error.message}`);
    }
    
    return data.map(d => d.day_of_week as string);
  },
  
  async addWorkoutDays(workoutId: string, days: string[]) {
    if (!days.length) return;
    
    const workoutDaysEntries = days.map(day => ({
      workout_id: workoutId,
      day_of_week: day
    }));
    
    const { error } = await supabase
      .from('workout_days')
      .insert(workoutDaysEntries);
    
    if (error) {
      throw new Error(`Error assigning days to workout: ${error.message}`);
    }
  },
  
  async getWorkoutsByDay(day: string) {
    const { data, error } = await supabase
      .from('workout_days')
      .select('workout_id')
      .eq('day_of_week', day);
    
    if (error) {
      throw new Error(`Error fetching workouts for day ${day}: ${error.message}`);
    }
    
    return data.map(d => d.workout_id);
  }
};

