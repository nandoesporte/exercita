
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { Json } from './types'; // Import the Json type from types.ts

const SUPABASE_URL = "https://jplkrysolselfculqvqr.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpwbGtyeXNvbHNlbGZjdWxxdnFyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY4MDQ3MjgsImV4cCI6MjA2MjM4MDcyOH0.ONBqZ01vHMrxEzxPklhPm5BlhI6O5Kjv1MFOJx_JN4A";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

// Create a custom type that extends the Database type
type CustomDatabase = {
  public: {
    Tables: {
      workout_days: {
        Row: {
          id: string;
          workout_id: string;
          day_of_week: string;
          created_at: string | null;
        };
        Insert: {
          id?: string;
          workout_id: string;
          day_of_week: string;
          created_at?: string | null;
        };
        Update: {
          id?: string;
          workout_id?: string;
          day_of_week?: string;
          created_at?: string | null;
        };
        Relationships: [
          {
            foreignKeyName: "workout_days_workout_id_fkey";
            columns: ["workout_id"];
            isOneToOne: false;
            referencedRelation: "workouts";
            referencedColumns: ["id"];
          }
        ];
      };
      personal_trainers: {
        Row: {
          id: string;
          name: string;
          credentials: string | null;
          bio: string | null;
          whatsapp: string | null;
          photo_url: string | null;
          is_primary: boolean | null;
          created_at: string | null;
          updated_at: string | null;
        };
        Insert: {
          id?: string;
          name: string;
          credentials?: string | null;
          bio?: string | null;
          whatsapp?: string | null;
          photo_url?: string | null;
          is_primary?: boolean | null;
          created_at?: string | null;
          updated_at?: string | null;
        };
        Update: {
          id?: string;
          name?: string;
          credentials?: string | null;
          bio?: string | null;
          whatsapp?: string | null;
          photo_url?: string | null;
          is_primary?: boolean | null;
          created_at?: string | null;
          updated_at?: string | null;
        };
        Relationships: [];
      };
    } & Database['public']['Tables'];
    
    Functions: {
      is_admin: {
        Args: { user_id: string };
        Returns: boolean;
      };
      get_all_users: {
        Args: Record<PropertyKey, never>;
        Returns: {
          id: string;
          email: string;
          raw_user_meta_data: Json;
          created_at: string;
          last_sign_in_at: string;
          banned_until: string;
        }[];
      };
      handle_kiwify_webhook: {
        Args: { payload: Json };
        Returns: Json;
      };
      toggle_user_active_status: {
        Args: { user_id: string; is_active: boolean };
        Returns: undefined;
      };
      get_tables_without_rls: {
        Args: Record<PropertyKey, never>;
        Returns: {
          table_name: string;
          has_rls: boolean;
          row_count: number;
        }[];
      };
      admin_enable_rls: {
        Args: { table_name: string };
        Returns: undefined;
      };
      admin_create_user: {
        Args: { 
          user_email: string; 
          user_password: string; 
          user_metadata?: Json;
        };
        Returns: string;
      };
      admin_delete_user: {
        Args: { user_id: string };
        Returns: undefined;
      };
    } & Database['public']['Functions'];
  };
};

export const supabase = createClient<CustomDatabase>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    auth: {
      storage: typeof window !== 'undefined' ? localStorage : undefined,
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      flowType: 'implicit'
    }
  }
);

// Helper functions for debugging session issues
export const checkAuthSession = async () => {
  try {
    const { data, error } = await supabase.auth.getSession();
    console.log('Current session status:', {
      hasSession: !!data.session, 
      error: error?.message || null,
      sessionExpiresAt: data.session?.expires_at,
      currentTime: Math.floor(Date.now() / 1000)
    });
    return data.session;
  } catch (err) {
    console.error('Error checking auth session:', err);
    return null;
  }
}
